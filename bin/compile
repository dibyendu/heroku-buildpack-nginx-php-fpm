#!/bin/bash
# Usage: bin/compile <build-dir> <cache-dir>

set -e
set -o pipefail

# START CONFIG
NGINX_VERSION='1.3.10'
LIBMCRYPT_VERSION='2.5.8'
PHP_VERSION='5.4.13'
S3_BUCKET='heroku-build-pack-nginx-php'
# END CONFIG

S3_URL="https://s3.amazonaws.com/${S3_BUCKET}"

MANIFEST_FILE='manifest.md5sum'
NGINX_FILE='nginx-heroku-bin.tar.gz'
MCRYPT_FILE='libmcrypt-heroku-bin.tar.gz'
PHP_FILE='php-with-fpm-heroku-bin.tar.gz'

MANIFEST_URL="${S3_URL}/${MANIFEST_FILE}"
NGINX_URL="${S3_URL}/${NGINX_FILE}"
MCRYPT_URL="${S3_URL}/${MCRYPT_FILE}"
PHP_URL="${S3_URL}/${PHP_FILE}"
COMPOSER_URL="http://getcomposer.org/composer.phar"

function indent() {
	c='s/^/       /'
	case $(uname) in
		Darwin) sed -l "$c";;
		*)      sed -u "$c";;
	esac
}

function check_md5() {
	SUMS_FILE="${BUNDLE_DIR}/${MANIFEST_FILE}"
	TARGET="$1"
	SUM=`cat "${SUMS_FILE}" | grep "${TARGET}" | cut -d ' ' -f 1`
	OUTPUT=`md5sum ${BUNDLE_DIR}/${TARGET} | cut -d ' ' -f 1`
	! [ "$SUM" = "$OUTPUT" ]
}

function download_url() {
	TARGET_URL="$1"
	curl -s -S -O -L -m 300 --connect-timeout 60 "$TARGET_URL"
}

BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
BUNDLE_DIR="${CACHE_DIR}/bundles"
LP_DIR=`cd $(dirname $0); cd ..; pwd`
export COMPOSER_HOME="${CACHE_DIR}/.composer"

# include .files when moving things around
shopt -s dotglob

cd $BUILD_DIR

# move app things to www
mkdir -p $CACHE_DIR/www
mv * $CACHE_DIR/www
mv $CACHE_DIR/www .

# Pre compress static files (js & css)
pushd ./www/stylesheets/minified/ > /dev/null
for file in *
do
  gzip -c -9 $file > $file.gz
done
popd > /dev/null
pushd ./www/javascript/minified/ > /dev/null
for file in *
do
  gzip -c -9 $file > $file.gz
done
popd > /dev/null

cd ..

mkdir -p $BUILD_DIR $CACHE_DIR ${BUNDLE_DIR} ${BUILD_DIR}/local ${BUILD_DIR}/vendor/bin ${COMPOSER_HOME} ${BUILD_DIR}/.profile.d

pushd ${BUNDLE_DIR} > /dev/null

if [ -n "`find . -type f -atime +30`" ]
then
	echo "-----> Pruning Unused Cached Bundles"
	find . -type f -atime +30 -delete | indent
fi

echo "-----> Fetching Manifest"
echo ${MANIFEST_URL} | indent
download_url ${MANIFEST_URL}

# Nginx
echo "-----> Installing Nginx"
if [ -f "${NGINX_FILE}" ]
then
	# check manifest
	if check_md5 "${NGINX_FILE}"
	then
		echo "Bundling Nginx v${NGINX_VERSION}" | indent
		echo ${NGINX_URL} | indent
		download_url ${NGINX_URL}
	else
		echo "Using cached Nginx v${NGINX_VERSION}" | indent
	fi
else
	# fetch
	echo "Bundling Nginx v${NGINX_VERSION}" | indent
	echo ${NGINX_URL} | indent
	download_url ${NGINX_URL}
fi

mkdir -p ${BUILD_DIR}/vendor/nginx
tar xzf ${NGINX_FILE} -C ${BUILD_DIR}/vendor/nginx

# libmcrypt
echo "-----> Installing libmcrypt"
if [ -f "${MCRYPT_FILE}" ]
then
	if check_md5 "${MCRYPT_FILE}"
	then
		echo "Bundling libmcrypt v${LIBMCRYPT_VERSION}" | indent
		echo ${MCRYPT_URL} | indent
		download_url ${MCRYPT_URL}
	else
		echo "Using cached libmcrypt v${LIBMCRYPT_VERSION}" | indent
	fi
else
	echo "Bundling libmcrypt v${LIBMCRYPT_VERSION}" | indent
	echo ${MCRYPT_URL} | indent
	download_url ${MCRYPT_URL}
fi

tar xzf ${MCRYPT_FILE} -C ${BUILD_DIR}/local

# PHP
echo "-----> Installing PHP"
if [ -f "$PHP_FILE" ]
then
	if check_md5 "${PHP_FILE}"
	then
		echo "Bundling PHP v${PHP_VERSION}" | indent
		echo ${PHP_URL} | indent
		download_url ${PHP_URL}
	else
		echo "Using cached PHP v${PHP_VERSION}" | indent
	fi
else
	echo "Bundling PHP v${PHP_VERSION}" | indent
	echo ${PHP_URL} | indent
	download_url ${PHP_URL}
fi

mkdir -p ${BUILD_DIR}/vendor/php
tar xzf ${PHP_FILE} -C ${BUILD_DIR}/vendor/php

popd > /dev/null

# Composer Installation
pushd ${BUILD_DIR} > /dev/null
if [ -f "composer.json" ]
then
	echo "-----> Installing dependencies using Composer"
	GIT_DIR_ORIG=${GIT_DIR}
	unset GIT_DIR

	if [ ! -f "composer.phar" ]
	then
		echo "Fetching composer.phar" | indent
		echo ${COMPOSER_URL} | indent
		download_url ${COMPOSER_URL}
	fi

	# do the deed!
	echo "Running: php composer.phar install" | indent
	LD_LIBRARY_PATH="${BUILD_DIR}/local/lib" ${BUILD_DIR}/vendor/php/bin/php composer.phar install -n | indent

	export GIT_DIR=${GIT_DIR_ORIG}
fi
popd > /dev/null

# Config files
echo "-----> Copying config files"
cp $LP_DIR/conf/php-fpm.conf ${BUILD_DIR}/vendor/php/etc/php-fpm.conf
cp ${BUILD_DIR}/vendor/php/php/fpm/status.html ${BUILD_DIR}/status.html
cp $LP_DIR/conf/php.ini ${BUILD_DIR}/vendor/php/php.ini
cp -n ${LP_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/
cp $LP_DIR/conf/nginx.conf.erb ${BUILD_DIR}/vendor/nginx/conf/nginx.conf.erb

echo "-----> Installing boot script"
cd $BUILD_DIR
cat >>boot.sh <<EOF
#!/usr/bin/env bash

echo "Booting Nginx ..."

# Override config files if provided in app.
if [ -d /app/conf ]; then

	mkdir -p /app/conf/nginx.d

	if [ -d /app/conf/etc.d ]; then
		cp -f /app/conf/etc.d/* /app/vendor/php/etc.d/
	fi

	if [ -r /app/conf/php-fpm.conf ]; then
		cp -f /app/conf/php-fpm.conf /app/vendor/php/etc/php-fpm.conf
	fi

	if [ -r /app/conf/php.ini ]; then
		cp -f /app/conf/php.ini /app/vendor/php/php.ini
	fi

	if [ -r /app/conf/nginx.conf.erb ]; then
		cp -f /app/conf/nginx.conf.erb /app/vendor/nginx/conf/nginx.conf.erb
	fi

fi

# Set correct port variable.
erb /app/vendor/nginx/conf/nginx.conf.erb > /app/vendor/nginx/conf/nginx.conf

if [ -d /app/conf/nginx.d ]; then
	# Parse .erb into .conf.
	for f in /app/conf/nginx.d/*.erb
	do
		if [ -r "\${f}" ];
		then
			erb "\${f}" > "\${f}.conf"
		fi
	done
fi

# Preserve current php-fpm.conf so that env list does
# not go out of hand across restarts.
if [ -r /app/vendor/php/etc/php-fpm.conf.current ]; then
	cp -f /app/vendor/php/etc/php-fpm.conf.current /app/vendor/php/etc/php-fpm.conf
else
	cp -f /app/vendor/php/etc/php-fpm.conf /app/vendor/php/etc/php-fpm.conf.current
fi

# Expose Heroku config vars to PHP-FPM processes
for var in \`env | cut -f1 -d=\`; do
	echo "env[\$var] = \\$\${var}" >> /app/vendor/php/etc/php-fpm.conf
done

touch /app/vendor/nginx/logs/access.log /app/vendor/nginx/logs/error.log /app/vendor/php/var/log/php-fpm.log /app/vendor/php/var/log/php-errors.log
mkdir -p client_body_temp fastcgi_temp proxy_temp scgi_temp uwsgi_temp
(tail -f -n 0 /app/vendor/nginx/logs/*.log /app/vendor/php/var/log/*.log &)

/app/vendor/php/sbin/php-fpm
/app/vendor/nginx/sbin/nginx
EOF
chmod +x boot.sh

echo "-----> Done with compile"
